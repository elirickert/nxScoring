// <copyright file="PostOperationnx_pinballroundscoreUpdate.cs" company="">
// Copyright (c) 2025 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/7/2025 4:50:00 PM</date>
// <summary>Implements the PostOperationnx_pinballroundscoreUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.ServiceModel;
using System.Text.Json;
using Microsoft.Xrm.Sdk;

namespace Nx.Score.Plugins.NxScorePlugins
{

    /// <summary>
    /// PostOperationnx_pinballroundscoreUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// nx_pointsafterround
    /// </summary>    
    public class PostOperationnx_pinballroundscoreUpdate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationnx_pinballroundscoreUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PostOperationnx_pinballroundscoreUpdate(string unsecure, string secure)
            : base(typeof(PostOperationnx_pinballroundscoreUpdate))
        {
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
    {
        if (localContext == null)
        {
            throw new InvalidPluginExecutionException(nameof(localContext));
        }
        // Obtain the tracing service
        ITracingService tracingService = localContext.TracingService;

            try
        {
            // Obtain the execution context from the service provider.  
            IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

            // Obtain the organization service reference for web service calls.  
            IOrganizationService currentUserService = localContext.CurrentUserService;

            // TODO: Implement your custom Plug-in business logic.

            // Obtain the target entity from the context.
            Entity targetEntity = context.InputParameters.Contains("Target") ? (Entity)context.InputParameters["Target"] : null;

            tracingService.Trace($"Target Entity: {targetEntity?.LogicalName}");
            tracingService.Trace($"Target Entity full: {JsonSerializer.Serialize(targetEntity, new JsonSerializerOptions { WriteIndented = true })}");

            // FIXME: update the record
            // currentUserService.Update();

        }
        // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
        catch (Exception ex)
        {
            tracingService?.Trace("An error occurred executing Plugin Nx.Score.Plugins.NxScorePlugins.PostOperationnx_pinballroundscoreUpdate : {0}", ex.ToString());
            throw new InvalidPluginExecutionException("An error occurred executing Plugin Nx.Score.Plugins.NxScorePlugins.PostOperationnx_pinballroundscoreUpdate .", ex);
        }
    }
}
}
